import { combineReducers } from "redux";
import { configureStore } from "@reduxjs/toolkit";
import {
  userReducer,
  userRefreshtoken,
  topCategories,
  RecentlyAdded,
  TrendingData,
  fetchUserPost,
  userSearchData,
  userSearchfilterData,
  viewComponentData,
  totalViews,
  totalDownload,
  totalComponents,
  fetchUserProfile,
  mostViewed,
  techStacks,
  favouritesData,
  userContribution,
  leaderboardData,
  pendingItemsdata,
  searchFavourtiesList,
  discoverMyInterests,
  MyInterestsAdd,
  viewDependenciesData,
  changeLogs,
  allIssues,
  reportedIssues,
  assignedIssues,
  AllReviewComments,
  AddReviewComments,
  AddReply,
  EditReply,
  DeleteReply,
  categoryList,
  SubcategoryList,
  raiseIssue,
  viewEachIssue,
  editReportedIssues,
  Reviewers,
  cancelIssueRes,
  deleteCommentRes,
  editCommentRes,
} from "./reducers/userReducer";
import {
  adminViewRole,
  adminFeatures,
  adminRolePermission,
  adminRoleGetData,
  adminRolePost,
  adminManageUserGet,
  manageComponents,
  adminManageUserDelete,
  adminRoleDelete,
  adminManageUserGetOne,
  adminRoleUpdate,
  adminManageComponentsPost,
  adminManageComponentsGetview,
  adminManageComponentsEditPost,
  adminTagList,
  adminFilterFieldsData,
  adminFilteredCompData,
  adminManageUserUpdate,
  adminSyncTechstack,
  adminSyncComponents,
  adminSyncFiles,
  componentStatusData,
  adminManageCompsaveData,
  techStackGetReport,
  techStackGetApprovalReport,
  trendComponent,
} from "./reducers/adminReducer";

const reducer = combineReducers({
  userlogin: userReducer,
  fetchUserPost: fetchUserPost,
  fetchUserProfile: fetchUserProfile,
  userRefreshtoken: userRefreshtoken,
  topcategories: topCategories,
  RecentlyAdded: RecentlyAdded,
  TrendingData: TrendingData,
  adminViewRole: adminViewRole,
  adminFeatures: adminFeatures,
  adminRolePermission: adminRolePermission,
  adminRoleGetData: adminRoleGetData,
  adminRolePost: adminRolePost,
  adminRoleDelete: adminRoleDelete,
  adminManageUserGet: adminManageUserGet,
  adminManageUserDelete: adminManageUserDelete,
  manageComponents: manageComponents,
  adminManageUserGetOne: adminManageUserGetOne,
  adminRoleUpdate: adminRoleUpdate,
  adminManageComponentsPost: adminManageComponentsPost,
  adminManageComponentsGetview: adminManageComponentsGetview,
  adminManageComponentsEditPost: adminManageComponentsEditPost,
  adminTagList: adminTagList,
  userSearchData: userSearchData,
  adminFilterFieldsData: adminFilterFieldsData,
  adminFilteredCompData: adminFilteredCompData,
  userSearchfilterData: userSearchfilterData,
  viewComponentData: viewComponentData,
  adminManageUserUpdate: adminManageUserUpdate,
  totalViews: totalViews,
  totalDownload: totalDownload,
  totalComponents: totalComponents,
  adminSyncTechstack: adminSyncTechstack,
  adminSyncComponents: adminSyncComponents,
  adminSyncFiles: adminSyncFiles,
  techStacks: techStacks,
  componentStatusData: componentStatusData,
  adminManageCompsaveData: adminManageCompsaveData,
  //phase-2
  techStackGetReport: techStackGetReport,
  techStackGetApprovalReport: techStackGetApprovalReport,
  trendComponent: trendComponent,
  favouritesData: favouritesData,
  leaderboardData: leaderboardData,
  pendingItemsdata: pendingItemsdata,
  userContribution: userContribution,
  searchFavourtiesList: searchFavourtiesList,
  discoverMyInterests: discoverMyInterests,
  MyInterestsAdd: MyInterestsAdd,
  changeLogs: changeLogs,
  mostViewed: mostViewed,
  viewDependenciesData: viewDependenciesData,
  AllReviewComments: AllReviewComments,
  AddReviewComments: AddReviewComments,
  AddReply: AddReply,
  EditReply: EditReply,
  DeleteReply: DeleteReply,
  allIssues: allIssues,
  reportedIssues: reportedIssues,
  assignedIssues: assignedIssues,
  raiseIssue: raiseIssue,
  viewEachIssue: viewEachIssue,
  CategoryList: categoryList,
  SubcategoryList: SubcategoryList,
  editReportedIssues: editReportedIssues,
  Reviewers: Reviewers,
  cancelIssueRes: cancelIssueRes,
  deleteCommentRes: deleteCommentRes,
  editCommentRes: editCommentRes,
});

const store = configureStore({
  reducer,
});
export type AppDispatch = typeof store.dispatch;
export default store;
